from openql import openql as ql
import os
import argparse

def circuit(config_file, scheduler='ASAP', mapper = 'base', output_dir_name='test_output', optimize='no', log_level='LOG_WARNING'):
    curdir = os.path.dirname(__file__)
    output_dir = os.path.join(curdir, output_dir_name)
    ql.set_option('output_dir', output_dir)
    ql.set_option('optimize', optimize)
    ql.set_option('scheduler', scheduler)
    ql.set_option('mapper', mapper)
    ql.set_option('log_level', log_level)

    config_fn = os.path.join(curdir, config_file)

    # platform  = ql.Platform('platform_none', config_fn)
    platform  = ql.Platform('starmon', config_fn)
    sweep_points = [1,2]
    num_circuits = 1
    num_qubits = 10
    p = ql.Program('qft_10', num_qubits, platform)
    p.set_sweep_points(sweep_points, num_circuits)
    k = ql.Kernel('qft_10', platform)
    k.gate('h',[0])
    k.gate('z(-0.7854)',[0])
    k.gate('cnot',[0,1])
    k.gate('z(0.7854)',[0])
    k.gate('cnot',[0,1])
    k.gate('z(-0.3927)',[0])
    k.gate('cnot',[0,2])
    k.gate('z(0.3927)',[0])
    k.gate('cnot',[0,2])
    k.gate('z(-0.19635)',[0])
    k.gate('cnot',[0,3])
    k.gate('z(0.19635)',[0])
    k.gate('cnot',[0,3])
    k.gate('z(-0.09815)',[0])
    k.gate('cnot',[0,4])
    k.gate('z(0.09815)',[0])
    k.gate('cnot',[0,4])
    k.gate('z(-0.0491)',[0])
    k.gate('cnot',[0,5])
    k.gate('z(0.0491)',[0])
    k.gate('cnot',[0,5])
    k.gate('z(-0.02455)',[0])
    k.gate('cnot',[0,6])
    k.gate('z(0.02455)',[0])
    k.gate('cnot',[0,6])
    k.gate('z(-0.01225)',[0])
    k.gate('cnot',[0,7])
    k.gate('z(0.01225)',[0])
    k.gate('cnot',[0,7])
    k.gate('z(-0.00615)',[0])
    k.gate('cnot',[0,8])
    k.gate('z(0.00615)',[0])
    k.gate('cnot',[0,8])
    k.gate('z(-0.00305)',[0])
    k.gate('cnot',[0,9])
    k.gate('z(0.00305)',[0])
    k.gate('cnot',[0,9])
    k.gate('h',[1])
    k.gate('z(-0.7854)',[1])
    k.gate('cnot',[1,2])
    k.gate('z(0.7854)',[1])
    k.gate('cnot',[1,2])
    k.gate('z(-0.3927)',[1])
    k.gate('cnot',[1,3])
    k.gate('z(0.3927)',[1])
    k.gate('cnot',[1,3])
    k.gate('z(-0.19635)',[1])
    k.gate('cnot',[1,4])
    k.gate('z(0.19635)',[1])
    k.gate('cnot',[1,4])
    k.gate('z(-0.09815)',[1])
    k.gate('cnot',[1,5])
    k.gate('z(0.09815)',[1])
    k.gate('cnot',[1,5])
    k.gate('z(-0.0491)',[1])
    k.gate('cnot',[1,6])
    k.gate('z(0.0491)',[1])
    k.gate('cnot',[1,6])
    k.gate('z(-0.02455)',[1])
    k.gate('cnot',[1,7])
    k.gate('z(0.02455)',[1])
    k.gate('cnot',[1,7])
    k.gate('z(-0.01225)',[1])
    k.gate('cnot',[1,8])
    k.gate('z(0.01225)',[1])
    k.gate('cnot',[1,8])
    k.gate('z(-0.00615)',[1])
    k.gate('cnot',[1,9])
    k.gate('z(0.00615)',[1])
    k.gate('cnot',[1,9])
    k.gate('h',[2])
    k.gate('z(-0.7854)',[2])
    k.gate('cnot',[2,3])
    k.gate('z(0.7854)',[2])
    k.gate('cnot',[2,3])
    k.gate('z(-0.3927)',[2])
    k.gate('cnot',[2,4])
    k.gate('z(0.3927)',[2])
    k.gate('cnot',[2,4])
    k.gate('z(-0.19635)',[2])
    k.gate('cnot',[2,5])
    k.gate('z(0.19635)',[2])
    k.gate('cnot',[2,5])
    k.gate('z(-0.09815)',[2])
    k.gate('cnot',[2,6])
    k.gate('z(0.09815)',[2])
    k.gate('cnot',[2,6])
    k.gate('z(-0.0491)',[2])
    k.gate('cnot',[2,7])
    k.gate('z(0.0491)',[2])
    k.gate('cnot',[2,7])
    k.gate('z(-0.02455)',[2])
    k.gate('cnot',[2,8])
    k.gate('z(0.02455)',[2])
    k.gate('cnot',[2,8])
    k.gate('z(-0.01225)',[2])
    k.gate('cnot',[2,9])
    k.gate('z(0.01225)',[2])
    k.gate('cnot',[2,9])
    k.gate('h',[3])
    k.gate('z(-0.7854)',[3])
    k.gate('cnot',[3,4])
    k.gate('z(0.7854)',[3])
    k.gate('cnot',[3,4])
    k.gate('z(-0.3927)',[3])
    k.gate('cnot',[3,5])
    k.gate('z(0.3927)',[3])
    k.gate('cnot',[3,5])
    k.gate('z(-0.19635)',[3])
    k.gate('cnot',[3,6])
    k.gate('z(0.19635)',[3])
    k.gate('cnot',[3,6])
    k.gate('z(-0.09815)',[3])
    k.gate('cnot',[3,7])
    k.gate('z(0.09815)',[3])
    k.gate('cnot',[3,7])
    k.gate('z(-0.0491)',[3])
    k.gate('cnot',[3,8])
    k.gate('z(0.0491)',[3])
    k.gate('cnot',[3,8])
    k.gate('z(-0.02455)',[3])
    k.gate('cnot',[3,9])
    k.gate('z(0.02455)',[3])
    k.gate('cnot',[3,9])
    k.gate('h',[4])
    k.gate('z(-0.7854)',[4])
    k.gate('cnot',[4,5])
    k.gate('z(0.7854)',[4])
    k.gate('cnot',[4,5])
    k.gate('z(-0.3927)',[4])
    k.gate('cnot',[4,6])
    k.gate('z(0.3927)',[4])
    k.gate('cnot',[4,6])
    k.gate('z(-0.19635)',[4])
    k.gate('cnot',[4,7])
    k.gate('z(0.19635)',[4])
    k.gate('cnot',[4,7])
    k.gate('z(-0.09815)',[4])
    k.gate('cnot',[4,8])
    k.gate('z(0.09815)',[4])
    k.gate('cnot',[4,8])
    k.gate('z(-0.0491)',[4])
    k.gate('cnot',[4,9])
    k.gate('z(0.0491)',[4])
    k.gate('cnot',[4,9])
    k.gate('h',[5])
    k.gate('z(-0.7854)',[5])
    k.gate('cnot',[5,6])
    k.gate('z(0.7854)',[5])
    k.gate('cnot',[5,6])
    k.gate('z(-0.3927)',[5])
    k.gate('cnot',[5,7])
    k.gate('z(0.3927)',[5])
    k.gate('cnot',[5,7])
    k.gate('z(-0.19635)',[5])
    k.gate('cnot',[5,8])
    k.gate('z(0.19635)',[5])
    k.gate('cnot',[5,8])
    k.gate('z(-0.09815)',[5])
    k.gate('cnot',[5,9])
    k.gate('z(0.09815)',[5])
    k.gate('cnot',[5,9])
    k.gate('h',[6])
    k.gate('z(-0.7854)',[6])
    k.gate('cnot',[6,7])
    k.gate('z(0.7854)',[6])
    k.gate('cnot',[6,7])
    k.gate('z(-0.3927)',[6])
    k.gate('cnot',[6,8])
    k.gate('z(0.3927)',[6])
    k.gate('cnot',[6,8])
    k.gate('z(-0.19635)',[6])
    k.gate('cnot',[6,9])
    k.gate('z(0.19635)',[6])
    k.gate('cnot',[6,9])
    k.gate('h',[7])
    k.gate('z(-0.7854)',[7])
    k.gate('cnot',[7,8])
    k.gate('z(0.7854)',[7])
    k.gate('cnot',[7,8])
    k.gate('z(-0.3927)',[7])
    k.gate('cnot',[7,9])
    k.gate('z(0.3927)',[7])
    k.gate('cnot',[7,9])
    k.gate('h',[8])
    k.gate('z(-0.7854)',[8])
    k.gate('cnot',[8,9])
    k.gate('z(0.7854)',[8])
    k.gate('cnot',[8,9])
    k.gate('h',[9])
    k.gate('h',[0])
    k.gate('h',[1])
    k.gate('h',[2])
    k.gate('h',[3])
    k.gate('h',[4])
    k.gate('h',[5])
    k.gate('h',[6])
    k.gate('h',[7])
    k.gate('h',[8])
    k.gate('h',[9])

    p.add_kernel(k)
    p.compile()
    ql.set_option('mapper', 'no')

if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='OpenQL compilation of a Quantum Algorithm')
    parser.add_argument('config_file', help='Path to the OpenQL configuration file to compile this algorithm')
    parser.add_argument('--scheduler', nargs='?', default='ASAP', help='Scheduler specification (ASAP (default), ALAP, ...)')
    parser.add_argument('--mapper', nargs='?', default='base', help='Mapper specification (base, minextend, minextendrc)')
    parser.add_argument('--out_dir', nargs='?', default='test_output', help='Folder name to store the compilation')
    args = parser.parse_args()
    try:
        circuit(args.config_file, args.scheduler, args.mapper, args.out_dir)
    except TypeError:
        print('\nCompiled, but some gate is not defined in the configuration file. \nThe gate will be invoked like it is.')
        raise