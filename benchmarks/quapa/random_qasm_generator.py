import argparse
import csv

from qbt import QbtException
from qbt.util import Printer
import qbt.qasm as qasm
from qbt.qasm.tools import RandomQasmGenerator


def main():
    # Create printer
    printer = Printer('random_qasm_generator')

    try:
        # Keys
        key_gate = 'gate'
        key_args = 'args'
        key_weight = 'weight'

        # Parse arguments
        parser = argparse.ArgumentParser()
        parser.add_argument('gate_list', type=argparse.FileType('r'),
                            help='CSV file with %s, %s, and %s' % (key_gate, key_args, key_weight))
        parser.add_argument('qubits', type=int, help='number of qubits')
        parser.add_argument('size', type=int, help='size of circuit in gate count')
        parser.add_argument('-o', '--output', type=argparse.FileType('w'), default='a.qasm', help='output file')
        parser.add_argument('--no-prepare', action='store_true', help='do not prepare all qubits (PrepZ)')
        parser.add_argument('--no-measure', action='store_true', help='do not measure all qubits (MeasZ)')
        args = parser.parse_args()

        # Check arguments
        if args.qubits <= 0:
            raise QbtException('Qubits argument should be larger then 0')
        if args.size < 0:
            raise QbtException('Size should be 0 or larger')

        # Define variables required for the random circuit generator
        distribution = dict()
        arguments = dict()
        qubits = ['q%i' % i for i in range(args.qubits)]

        printer.write('Parsing gate list %s...' % args.gate_list.name)
        try:
            for line in csv.DictReader(args.gate_list):
                # Get the gate as a string
                gate = line[key_gate]
                if not gate:
                    raise QbtException('Gate name can not be empty')
                if gate in distribution:
                    printer.write(printer.WARNING + 'Gate name appeared twice, adding weights')

                # Store the weight
                w = line[key_weight]
                try:
                    w = int(w)
                except ValueError:
                    raise QbtException('Weight of gate %s should be an integer' % gate)
                if w < 0:
                    raise QbtException('Weight of gate %s should be >= 0' % gate)
                distribution[gate] = distribution.get(gate, 0) + w

                # Store the number of arguments
                a = line[key_args]
                try:
                    a = int(a)
                except ValueError:
                    raise QbtException('Arguments of gate %s should be an integer' % gate)
                if a < 0:
                    raise QbtException('Arguments of gate %s should be >= 0' % gate)
                arguments[gate] = a

        except KeyError:
            raise QbtException('CSV file should contain columns %s, %s, and %s' % (key_gate, key_args, key_weight))

        printer.write('Writing circuit to %s...' % args.output.name)
        # Write header
        header = ['# QASM file generated by random_qasm_generator.py\n',
                  '#\n',
                  '# Qubits: %i\n' % args.qubits,
                  '# Size: %i\n' % args.size,
                  '# Prepare: %s\n' % (not args.no_prepare),
                  '# Measure: %s\n' % (not args.no_measure),
                  '# Distribution:\n#   %s\n\n' % '\n#   '.join(str(distribution)[1:-1].split(', ')), ]
        args.output.writelines(header)

        # Write number of qubits
        args.output.write('# Number of qubits\n%s\n\n' % qasm.FORMAT_QUBITS.format(num=len(qubits)))

        if not args.no_prepare:
            # Write preparation
            args.output.write('# Prepare qubits\n')
            args.output.writelines('%s\n' % qasm.FORMAT_INSTR.format(operation='PrepZ', args=q) for q in qubits)

        # Write random circuit
        args.output.write('\n# Random circuit\n')
        random_generator = RandomQasmGenerator(distribution, arguments, qubits)
        args.output.writelines('%s\n' % e for e in random_generator.iterator(args.size))

        if not args.no_measure:
            # Write measurement
            args.output.write('\n# Measure qubits\n')
            args.output.writelines('%s\n' % qasm.FORMAT_INSTR.format(operation='MeasZ', args=q) for q in qubits)

    except (QbtException, FileNotFoundError) as e:
        # Catch and print some exceptions
        printer.write(e)
    else:
        # Print final message
        printer.write('Done!')


if __name__ == '__main__':
    main()
